<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 我的学习博客</title>
    <link>https://yslinwe.github.io/post/</link>
    <description>Recent content in Posts on 我的学习博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 11 Apr 2020 18:50:45 +0800</lastBuildDate>
    
	<atom:link href="https://yslinwe.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OneDriveUploader使用</title>
      <link>https://yslinwe.github.io/post/one/</link>
      <pubDate>Sat, 11 Apr 2020 18:50:45 +0800</pubDate>
      
      <guid>https://yslinwe.github.io/post/one/</guid>
      <description>将同目录下的 mm00.jpg 文件上传到 OneDrive 网盘根目录 OneDriveUploader -s &amp;ldquo;mm00.jpg&amp;rdquo;
将同目录下的 mm00.jpg 文件上传到 OneDrive 网盘根目录,并改名为 mm01.jpg OneDriveUploader -s &amp;ldquo;mm00.jpg&amp;rdquo; -n &amp;ldquo;mm01.jpg&amp;rdquo;
将同目录下的 Download 文件夹上传到 OneDrive 网盘根目录 OneDriveUploader -s &amp;ldquo;Download&amp;rdquo;
将同目录下的 Download 文件夹上传到 OneDrive 网盘Test目录中 OneDriveUploader -s &amp;ldquo;Download&amp;rdquo; -r &amp;ldquo;Test&amp;rdquo;
将同目录下的 Download 文件夹上传到 OneDrive 网盘Test目录中, 使用 10 线程 OneDriveUploader -t 10 -s &amp;ldquo;Download&amp;rdquo; -r &amp;ldquo;Test&amp;rdquo;
将同目录下的 Download 文件夹上传到 OneDrive 网盘Test目录中, 使用 15 线程, 并设置分块大小为 20M OneDriveUploader -t 15 -b 20 -s &amp;ldquo;Download&amp;rdquo; -r &amp;ldquo;Test&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Github高级搜索</title>
      <link>https://yslinwe.github.io/post/github%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Fri, 10 Apr 2020 20:37:15 +0800</pubDate>
      
      <guid>https://yslinwe.github.io/post/github%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2/</guid>
      <description>in:name example 名字中有“example” in:readme example readme中有“example” in:description example 描述中有“example”
stars:&amp;gt;1000 star&amp;gt;1000 forks:&amp;gt;1000 fork&amp;gt;1000 pushed:&amp;gt;2019-09-01 2019年9月1日后有更新的
language:java 用Java编写的项目 更多打开：https://help.github.com/en/github/searching-for-information-on-github/searching-for-repositories</description>
    </item>
    
    <item>
      <title>服务器命令行</title>
      <link>https://yslinwe.github.io/post/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/</link>
      <pubDate>Fri, 10 Apr 2020 19:02:01 +0800</pubDate>
      
      <guid>https://yslinwe.github.io/post/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/</guid>
      <description>#上传文件 pscp -r newlivedowload root@139.9.116.41:live_download nethogs eth0 ls -lh df -l ps -aux|grep get.py| grep -v grep nohup 运行文件&amp;gt;&amp;gt; output.log 2&amp;gt;&amp;amp;1 &amp;amp; nohup python3 -u main.py &amp;gt; test.out 2&amp;gt;&amp;amp;1 &amp;amp;
#限制网速 git clone https://github.com/magnific0/wondershaper.git 在确定网卡名称以后，就可以按照以下的命令限制网络带宽：
sudo wondershaper -a &amp;lt;adapter&amp;gt; -d &amp;lt;rate&amp;gt; -u &amp;lt;rate&amp;gt;  例如，如果网卡名称是 enp0s8，并且需要把上行、下行速率分别限制为 1024 Kbps 和 512 Kbps，就可以执行以下命令：
sudo wondershaper -a eth0 -d 1024 -u 512  其中参数的含义是：
-a：网卡名称 -d：下行带宽 -u：上行带宽 如果要对网卡解除网络带宽的限制，只需要执行： ./wondershaper -a eth0 -c
#后台运行</description>
    </item>
    
    <item>
      <title>剑指office（一）二维数组查找</title>
      <link>https://yslinwe.github.io/post/%E5%89%91%E6%8C%87office%E4%B8%80%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Wed, 21 Aug 2019 15:03:24 +0800</pubDate>
      
      <guid>https://yslinwe.github.io/post/%E5%89%91%E6%8C%87office%E4%B8%80%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E6%9F%A5%E6%89%BE/</guid>
      <description>题目描述 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
//时间过长不能通过。
bool Find(int target, vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; array) { int col = 0, row = 0; row = array.size(); col = array[0].size(); int up = 0, down = row - 1; int right = col - 1, left = 0; while (left &amp;lt; col-1&amp;amp;&amp;amp;right &amp;gt; 0&amp;amp;&amp;amp;down+1 &amp;gt; 0&amp;amp;&amp;amp;up &amp;lt; row-1) { int left_temp = left; int rl_mid = (right + left) / 2; cout &amp;lt;&amp;lt; &amp;quot;rl_mid=&amp;quot; &amp;lt;&amp;lt; rl_mid &amp;lt;&amp;lt;&amp;quot; &amp;quot;&amp;lt;&amp;lt;&amp;quot;right=&amp;quot;&amp;lt;&amp;lt;right&amp;lt;&amp;lt;&amp;quot; &amp;quot;&amp;lt;&amp;lt;&amp;quot;left=&amp;quot;&amp;lt;&amp;lt; left&amp;lt;&amp;lt; endl; int rl_val = array[up][rl_mid]; if (target == rl_val) return true; else if (target &amp;lt; rl_val) right = rl_mid - 1; else left = rl_mid + 1; int ud_mid = (up + down) / 2; cout &amp;lt;&amp;lt; &amp;quot;ud_mid=&amp;quot; &amp;lt;&amp;lt; ud_mid &amp;lt;&amp;lt;&amp;quot; &amp;quot;&amp;lt;&amp;lt; &amp;quot;up=&amp;quot;&amp;lt;&amp;lt;up&amp;lt;&amp;lt;&amp;quot; &amp;quot;&amp;lt;&amp;lt;&amp;quot;down=&amp;quot;&amp;lt;&amp;lt;down &amp;lt;&amp;lt;endl; int ud_val = array[ud_mid][left_temp]; if (target == ud_val) return true; else if (target &amp;lt; ud_val) down = ud_mid - 1; else up = ud_mid + 1; } return false; } bool Find2(int target, vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; array) { int rows = array.</description>
    </item>
    
    <item>
      <title>剑指office（二）替换空格</title>
      <link>https://yslinwe.github.io/post/%E5%89%91%E6%8C%87office%E4%BA%8C%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</link>
      <pubDate>Wed, 21 Aug 2019 15:03:24 +0800</pubDate>
      
      <guid>https://yslinwe.github.io/post/%E5%89%91%E6%8C%87office%E4%BA%8C%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</guid>
      <description>#题目描述 请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy
//需要头文件： #include&amp;lt;iostream&amp;gt; #include&amp;lt;stdlib.h&amp;gt; #include&amp;lt;string&amp;gt; void replaceSpace(char* str, int length) { int count = 0; for (int i = 0; i &amp;lt; length; i++) { if (str[i] == &#39; &#39;) count++; } int new_length = length + 2 * count; int j = length-1; for (int i = new_length-1; i &amp;gt;= 0;) { if (str[j] == &#39; &#39;) { str[i--] = &#39;0&#39;; str[i--] = &#39;2&#39;; str[i--] = &#39;%&#39;; } else { str[i--] = str[j]; } j--; } } void replaceSpace2(char* str, int length) { int i = 0; int numSpace = 0; while (str[i] !</description>
    </item>
    
    <item>
      <title>数据结构学习</title>
      <link>https://yslinwe.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Wed, 21 Aug 2019 15:03:24 +0800</pubDate>
      
      <guid>https://yslinwe.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/</guid>
      <description>#数据结构笔记 顺序栈和顺序队列使用动态数组实现 以下不是C++中stack的实现 #顺序栈 特点：后进先出，先进后出 栈可以用数组或者链表写 开始时，栈顶Top=-1 #顺序栈操作 Push（栈顶添加元素） Top（返回当前栈顶数据） Pop （删除栈顶数据） IsEmpty（检查栈是否为空） #数组实现 #实现自动扩大数组大小 #模板类实现和声明要写在一起
templatevoid ChangeSize1D(T* &amp;amp;a，const int oldSize, const int newSize) { if(newSize=0&amp;rdquo;; T* temp =new T[newSize]; int number = min(oldSize,newSize); std::copy(a,a+number,temp); delete[] a; a=temp; }
#顺序队列（Queue） 特点：先进先出，后进后出 #队列操作 Push（队尾添加元素） Pop （队首删除元素） Front（返回当前队首数据） Rear（返回当前队尾数据） IsEmpty（检查队列是否为空） #实现回绕（利用数组删除后留下的空间） rear=front front++ 如果front=rear表示队列满了，要自动扩大数组大小
#链表 链表：1.数据域 2.链接域 数组缺点：插入数据时慢，需要向后移动，删除数据时，需要向前移动。 链表可以弥补这些缺点。
#树 数组缺点：插入数据，数据要移动。 数组优点：二分查找 链表缺点：无法二分查找 链表优点: 插入删除数据快 树 = 数组的优点 + 链表的优点</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yslinwe.github.io/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yslinwe.github.io/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>